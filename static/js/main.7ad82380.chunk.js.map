{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","components/Message.js","App.js","shared/CalculateWinner.js","index.js"],"names":["Square","value","onClick","isWinningSquares","type","className","Board","board","handleClick","winningSquares","renderState","position","includes","History","history","moveTo","currentMove","map","_","move","Message","winner","current","noMoveLeft","every","el","isXNext","NEW_GAME","Array","fill","App","useState","setHistory","setCurrentMove","squares","lines","i","length","a","b","c","calculateWinner","prev","last","newBoard","square","pos","concat","style","fontWeight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ad82380.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = ({ value, onClick, isWinningSquares }) => {\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={onClick}\n        className={`square ${isWinningSquares ? \"winning\" : \"\"} ${\n          value === \"X\" ? \"text-green\" : \"text-orange\"\n        }`}\n      >\n        {value}\n      </button>\n    </>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nconst Board = ({ board, handleClick, winningSquares }) => {\n  const renderState = (position) => {\n    const isWinningSquares = winningSquares.includes(position);\n    return (\n      <Square\n        value={board[position]}\n        onClick={() => handleClick(position)}\n        isWinningSquares={isWinningSquares}\n      />\n    );\n  };\n\n  return (\n    <div className=\"board\">\n      <div className=\"board-row\">\n        {renderState(0)}\n        {renderState(1)}\n        {renderState(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderState(3)}\n        {renderState(4)}\n        {renderState(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderState(6)}\n        {renderState(7)}\n        {renderState(8)}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nconst History = ({ history, moveTo, currentMove }) => {\n  return (\n    <div className=\"history-wrapper\">\n      <ul className=\"history\">\n        {history.map((_, move) => {\n          return (\n            <li key={move}>\n              <button\n                className={`btn-move ${move === currentMove ? \"active\" : \"\"}`}\n                type=\"button\"\n                onClick={() => moveTo(move)}\n              >\n                {move === 0 ? \"Go to game start\" : `Go to move ${move}`}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default History;\n","import React from \"react\";\n\nconst Message = ({ winner, current }) => {\n  const noMoveLeft = current.board.every((el) => el !== null);\n  return (\n    <div className=\"status-message\">\n      {winner && (\n        <>\n          Winner is{\" \"}\n          <span className={winner === \"X\" ? \"text-green\" : \"text-orange\"}>\n            {winner}\n          </span>\n        </>\n      )}\n      {!winner && !noMoveLeft && (\n        <>\n          Next Step is{\" \"}\n          <span className={current.isXNext ? \"text-green\" : \"text-orange\"}>\n            {current.isXNext ? \"X\" : \"O\"}\n          </span>\n        </>\n      )}\n      {!winner && noMoveLeft && (\n        <>\n          <span className=\"text-green\"> X </span> &\n          <span className=\"text-orange\"> O </span> tied\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useState } from \"react\";\nimport Board from \"./components/Board\";\nimport History from \"./components/History\";\nimport Message from \"./components/Message\";\nimport { calculateWinner } from \"./shared/CalculateWinner\";\nimport \"./root.scss\";\n\nconst NEW_GAME = [{ board: Array(9).fill(null), isXNext: true }];\n\nfunction App() {\n  const [history, setHistory] = useState(NEW_GAME);\n  const [currentMove, setCurrentMove] = useState(0);\n\n  const current = history[currentMove];\n  const { winner, winningSquares } = calculateWinner(current.board);\n\n  const handleClick = (position) => {\n    if (current.board[position] || winner) return;\n    setHistory((prev) => {\n      const last = prev[prev.length - 1];\n      const newBoard = last.board.map((square, pos) => {\n        if (pos === position) return last.isXNext ? \"X\" : \"O\";\n        return square;\n      });\n      return prev.concat({ board: newBoard, isXNext: !last.isXNext });\n    });\n    setCurrentMove((prev) => prev + 1);\n  };\n  const moveTo = (move) => {\n    setCurrentMove(move);\n  };\n  const onNewGame = () => {\n    setHistory(NEW_GAME);\n    setCurrentMove(0);\n  };\n  return (\n    <div className=\"app\">\n      <h1>\n        TIC <span className=\"text-green\">TAC</span> TOE\n      </h1>\n      <Message winner={winner} current={current} />\n      <Board\n        board={current.board}\n        handleClick={handleClick}\n        winningSquares={winningSquares}\n      />\n      <button type=\"button\" onClick={onNewGame} className=\"btn-reset\">\n        Start New Game\n      </button>\n      <h2 style={{ fontWeight: \"normal\" }}>Current Game History</h2>\n      <History history={history} moveTo={moveTo} currentMove={currentMove} />\n      <div className=\"bg-balls\" />\n    </div>\n  );\n}\n\nexport default App;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        winningSquares: [a, b, c],\n      };\n    }\n  }\n  return {\n    winner: null,\n    winningSquares: [],\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}